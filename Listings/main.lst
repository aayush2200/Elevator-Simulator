C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 09:43:32 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <at89c5131.h>
   2          #include "lcd.h"
   3          #include <stdio.h>  //for sprintf functions
   4          
   5          /******************* Global variables for the project*********************************************/
   6          
   7          //Variable to store which at which floor is the user
   8          unsigned char src = 0;
   9          
  10          //Variable to store at which floor the user has to go
  11          unsigned char dst = 0;
  12          
  13          //variable that stores which elevator to use out of the 2 elevators
  14          unsigned char elev_index = 0;
  15          
  16          //array that stores the current position of each elevator
  17          unsigned char elev[2] = {0, 0};
  18          
  19          //array that stores the commands that would be send to change the cursor position according to elevator in
             -dex
  20          code unsigned int cmd[2] = {0x80, 0x85};
  21          
  22          //floor array that stores the value of the floor when converted to string to send to LCD
  23          unsigned char floor[3] = {0,0,'\0'};
  24          
  25          /*******************************Functions of the project*******************************************/
  26          
  27          
  28          void mov_elevator(unsigned char pos)
  29          /******************************************************************************
  30          This function moves the elevator to the desired position which is given as
  31          the input to the function. It uses the global elevator index to move the desired
  32          elevator to the required position.
  33          *******************************************************************************/
  34          {
  35   1        char disp = pos - elev[elev_index];
  36   1        if (disp < 0) disp = -disp;
  37   1        while (1) {
  38   2          if (disp == 0) break;
  39   2          if (pos > elev[elev_index]) {
  40   3            elev[elev_index] += 1;
  41   3            msdelay(1000);
  42   3            lcd_cmd(cmd[elev_index]);
  43   3            int_to_string(elev[elev_index], floor);
  44   3            lcd_write_string(floor);
  45   3          }
  46   2          else {
  47   3            elev[elev_index] -= 1;
  48   3            lcd_cmd(cmd[elev_index]);
  49   3            msdelay(1000);
  50   3            lcd_cmd(cmd[elev_index]);
  51   3            int_to_string(elev[elev_index], floor);
  52   3            lcd_write_string(floor);
  53   3          }
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 09:43:32 PAGE 2   

  54   2          disp -= 1;
  55   2        }
  56   1      }
  57          
  58          
  59          int take_input(unsigned char prev)
  60          /*****************************************************************************
  61          This function takes the input from the switch and returns that value.
  62          The argument given to the function is the previous value of switch.
  63          If the previous value is same as the current value it remains in infinte loop.
  64          ******************************************************************************/
  65          {
  66   1        unsigned char curr;
  67   1        while (1) {
  68   2          curr = P1 & 0x0F;
  69   2          msdelay(100);
  70   2          if (curr != prev) break;
  71   2        }
  72   1        return curr;
  73   1      }
  74          
  75          
  76          int nearest_elevator(unsigned char new_pos)
  77          /**************************************************************************************
  78          This function finds the nearest elevator and returns the index of that elevator.
  79          The argument given to the function is the location where the user called the elevator.
  80          ***************************************************************************************/
  81          {
  82   1        unsigned char move = 0;
  83   1        char diff1 = new_pos - elev[0];
  84   1        char diff2 = new_pos - elev[1];
  85   1        if (diff1 < 0) diff1 = -diff1;
  86   1        if (diff2 < 0) diff2 = -diff2;
  87   1        
  88   1        if (diff1 > diff2) {move = 1;}
  89   1        else {move = 0;}
  90   1        
  91   1        return move;
  92   1      }
  93          
  94          /***************************************MAIN FUNCTION*****************************************************
             -********/
  95          void main(void)
  96          {
  97   1        // Port, LCD initialisation
  98   1        P1 = 0xFF;
  99   1        lcd_init();
 100   1        lcd_write_string("00 | 00");
 101   1        while (1)
 102   1        {
 103   2          // Take input from the switch to get the user location
 104   2          src = take_input(dst);
 105   2          // Find the nearest elevator to the user
 106   2          elev_index = nearest_elevator(src);
 107   2          // Move that elevator to the user location
 108   2          mov_elevator(src);
 109   2          // Wait for the user to enter the destination location
 110   2          dst = take_input(src);
 111   2          // Move the same elevator to the destination
 112   2          mov_elevator(dst);
 113   2          // Wait for the user to get out
 114   2          msdelay(2000);
C51 COMPILER V9.60.0.0   MAIN                                                              04/12/2021 09:43:32 PAGE 3   

 115   2        }
 116   1      } 


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    490    ----
   CONSTANT SIZE    =     12    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8      11
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
